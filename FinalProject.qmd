---
title: "Final Project"
author: "Adriana Vance, Kyle Kim, Elena Koshkin, Kamiryn Rose"
format: html
editor: visual
---

#### Loading Data Sets

```{r echo = false}
library(httr)
library(jsonlite)
library(tidyverse)
library(tidycensus)
library(purrr)
library(sf)
library(dplyr)


#Read in CSV of CDC data
Health <- read_csv("PLACES.csv")

# Look at types of health outcome measures
Measures <- Health %>%
  group_by(Measure) %>%
  summarize(n = n())

MeasureIDs <- Health %>%
  group_by(MeasureId) %>%
  summarize(n = n())

# We want to look for current rates of asthma, heart disease, diabetes, stroke, and depression
Health <- Health %>%
  filter(
    MeasureId == "CASTHMA" |
      MeasureId == "CHD" |
      MeasureId == "DIABETES" |
      MeasureId == "STROKE" |
      MeasureId == "DEPRESSION")

ACSData <- load_variables(2021, "acs5") #browse to find variables
      
# Loading ACS Data (not working right now)
my_vars <- c(median_cost_ratio = "B25071_001E")


DC <- get_acs(geography = "tract",
                     variables = my_vars,
                     state = "DC", 
                     output = "wide",
                     survey = "acs5",
                     year = 2021,
                     geometry = TRUE)

MD <- get_acs(geography = "tract",
                     variables = my_vars,
                     state = "MD",
                     county = c("Montgomery", "Prince George's"),
                     output = "wide",
                     survey = "acs5",
                     year = 2021,
                     geometry = TRUE)

VA <- get_acs(geography = "tract",
                     variables = my_vars,
                     state = "VA",
                     county = "Fairfax County",
                     output = "wide",
                     survey = "acs5",
                     year = 2021,
                     geometry = TRUE)

All_states <- bind_rows(DC, MD, VA)


```

#### Playing around w mapping

```{r}
# Change geometry to be readable by SF

Health_map <- Health_filter %>%
  st_as_sf(wkt = "Geolocation", remove = FALSE) %>%
  st_set_crs(value = 4326) # setting CRS

# Map health outcomes
Health_map %>%
  ggplot() +
  geom_sf(aes(color = MeasureId))

```

```{r}
library(tigris) 

Maryland_tracts <- tracts(
state = "MD",
county = c("Montgomery", "Prince George's"),
cb = FALSE,
resolution = "500k",
year = 2010)

Virginia_tracts <- tracts(
  state = "VA",
  county = "Fairfax County",
  resolution = "500k", 
  year = 2010
)

DC_tracts <- tracts(
  state = "DC",
  resolution = "500k",
  year = 2010
)

DMV_tracts<- rbind_tigris(DC_tracts, Virginia_tracts, Maryland_tracts)

```

```{r}
#loading credit unions data
credit_unions<- read.csv("Credit_Unions.csv")
view(credit_unions)

#loading banks data 
banks <- read.csv("banks.csv")
view(banks) 
```

```{r}
# replace the white space with underscores and lower-case all of the letters in column names
names(banks) <- names(banks) |> 
  str_replace_all("\\s", "_") |> 
  str_to_lower()
#filter the data to rows about banks that have valid longitudes and latitudes
banks_locations <- banks |>
  filter(!is.na(longitude), !is.na(latitude))
#convert longitude and latitude columns into spatial geometries
banks_locations <- st_as_sf(banks, coords = c("longitude", "latitude"))
#set CRS to 4326 (WGS 84)
banks_locations <- st_set_crs(banks_locations, value = 4326)
#check the CRS
st_crs(banks_locations)
#plot map using ggplot2
banks_locations |>
  ggplot() +
  geom_sf(
    aes(color = ward), alpha = 0.4, size = 2)

# spatial join and census tracts 
#match CRS of both objects using the given CRS: 4326
banks_locations <- st_transform(banks_locations, crs = st_crs(DMV_tracts))

#spatial join bank points and census tracts
banks_join <- st_join(banks_locations, DMV_tracts, st_intersects) 


#trying to plot bank locations over a map of the census tracts 
gg <- ggplot()
gg <- gg + geom_polygon(data=DMV_tracts, aes(x= xcoord, y= ycoord, group = GEOID10), color = "black", size=0.5) 
gg <- gg + geom_point(data=banks_join, aes(x=longitude, y=latitude, color="red"))
gg <- gg +  coord_map()
gg

install.packages("tmap")
library(tmap)
tm_shape(DMV_tracts) +
tm_polygons()

DMV_tracts_filter<- DMV_tracts %>%
  select(GEOID10, geometry)


```

```{r}
# loading debt to income ratio data

debt_to_income <- read.table("debt_to_income.txt", header = FALSE) 
# Have to manually name columns (will filter to only useful columns later)

colnames(debt_to_income) <- c('enterprise', 'record_num','state_postal_code', 'MSA', 'COUNTYFP', 'NAME10', 'percent_minority', 'median_income', 'MSA_median_income', 'tract_income_ratio', 'borrower_income','AMI', 'borrower_income_ratio', 'UPB','purpose_of_loan', 'fed_guarantee', 'num_borrowers', 'first_time_borrower', 'borrower_race_1', 'race_2', 'race_3', 'race_4', 'race_5', 'borrower_ethnicity', 'co-borrower_race_1', 'co-race_2', 'co-race_3', 'co-race_4', 'co-race_5',   'co-borrower_ethnicity', 'borrower_gender', 'co-borrower_gender', 'borrower_age', 'co-borrower_age', 'occupancy_code', 'rate_spread', 'HOEPA_status', 'property_type', 'lien_status', 'borrower_over_sixtytwo', 'co-borrower_over_sixtytwo', 'LTV_ratio', 'note_date', 'mortgage_term', 'num_units', 'interest_rate', 'note_amount', 'preapproval', 'application_channel', 'AUS_name', 'borrower_credscore_model', 'co-borrower_credscore_model', 'DTI_ratio', 'discount_points', 'rate_period', 'manufactured_home_ownership', 'property_value', 'rural_tract', 'lower_MS_delta', 'Mid_Appalachia', 'persistent_poverty_county', 'concentrated_poverty', 'high_opportunity_area', 'QOZ')

counties <- c(1, 59, 31) # Name county vector to filter dataset to needed counties only 

library(dplyr)
debt_to_income <- debt_to_income %>%
  filter(MSA == 47900) 

debt_to_income <- debt_to_income %>%
  filter(COUNTYFP == counties) # Filtering to needed counties 

# Mutate dataset to match county names of TIGRIS shapefile
debt_to_income <- debt_to_income %>%
  mutate(COUNTYFP = 
    if_else(COUNTYFP == 1, "001", as.character(COUNTYFP)))

debt_to_income <- debt_to_income %>%
  mutate(COUNTYFP = 
           if_else(COUNTYFP == 59, "059", as.character(COUNTYFP)))
    
debt_to_income <- debt_to_income %>%
  mutate(COUNTYFP = 
           if_else(COUNTYFP == 31, "031", as.character(COUNTYFP)))

debt_to_income$NAME10 <- as.numeric(debt_to_income$NAME10)

DMV_tracts$NAME10 <- as.numeric(DMV_tracts$NAME10)

debt_to_income$NAME10 <- debt_to_income$NAME10 / 100

debt_tract <- full_join(debt_to_income, DMV_tracts, by = "NAME10") #Merge census tract and debt datasets

debt_tract$NAME10 <- debt_tract$NAME10 * 100
# multiply census tracts by 100 so they are in the correct format

DMV_tracts %>%
  ggplot() + 
  geom_sf()

```
